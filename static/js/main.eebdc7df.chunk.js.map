{"version":3,"sources":["HeaderComponents/Header.js","AddRecordComponents/AddPay.js","AddRecordComponents/AddRestaurant.js","AddRecordComponents/AddRecord.js","StatsComponents/StatSearchZip.js","StatsComponents/StatSearchZipAndPrice.js","StatsComponents/StatSearch.js","JobComponents/JobCard.js","JobComponents/Jobs.js","Home.js","AuthComponents/LoginPage.js","AuthComponents/signUp.js","AuthComponents/AuthControl.js","MyRecordsComponents/PayRecordCard.js","MyRecordsComponents/UpdateBox.js","MyRecordsComponents/MyRecords.js","App.js","AuthComponents/useToken.js","reportWebVitals.js","index.js"],"names":["Header","props","className","to","onClick","sessionStorage","clear","setToken","AddPay","useEffect","fetchItems","useState","title","setTitle","hourlyPay","setHourlyPay","weeklyTips","setWeeklyTips","weeklyHours","setWeeklyHours","restaurant","setRestaurant","allRestaurants","setAllRestaurants","errors","setErrors","a","fetch","method","headers","token","data","json","dataReturn","restaurantObjs","Array","from","restaurants","forEach","item","arrayedItem","_id","zip_code","name","entree_price","push","onSubmitTask","event","preventDefault","requestOptions","body","JSON","stringify","hourly_pay","weekly_tips","weekly_hours","then","response","undefined","array","errorArray","msg","alert","sendData","class","onSubmit","e","htmlFor","onChange","target","value","type","autoComplete","min","map","index","AddRestaurant","fetchFormNameAndZips","zips","setZips","zipCode","setZipCode","setName","entree","setEntree","sortedZipArray","sort","b","console","log","setNewRestaurant","AddRecord","newRestaurant","StatSearchZip","zipCodeSearched","setZipCodeSearched","averages","setAverages","fetchByZip","zipData","average","minLength","maxLength","StatSearchZipAndPrice","entreeSearched","setEntreeSearched","StatSearch","PayRecordCard","href","Jobs","allJobs","setAllJobs","jobsObjs","jobs","location","url","Stats","fetchTopFive","fetchPayByEntree","top5","setTop5","payEntree","setPayEntree","topZips","zipArray","zip","payByEntree","entreeArray","loginUser","credentials","catch","err","Login","username","setUserName","password","setPassword","message","setMessage","handleSubmit","error","toggle","signUser","SignUp","AuthControl","signUp","setSignUp","login","setLogin","toggleSignUp","toggleLogin","payid","increaseDeleteCount","increaseUpdateCount","UpdateBox","resetUpdateValue","MyRecord","deleteCount","setdeleteCount","updateValue","setUpdateValue","allRecords","setAllRecords","changeUpdateValue","data2","dataReturn2","recordObjs","restaurantName","user","App","tokenString","getItem","userToken","parse","getToken","setItem","useToken","basename","path","exact","render","Home","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eebdc7df.chunk.js","sourcesContent":["import \"./style/Header.css\";\nimport {Link} from \"react-router-dom\"\n\nfunction Header (props) {\n\n    const logOut = () => {\n        sessionStorage.clear();\n        props.setToken('');\n    }\n\n    return(\n        <div className=\"d-flex justify-content-around bg-primary align-items-center\">\n            <Link to=\"/\">\n            <div className=\"text-white btn btn-primary\">\n                    Home  \n                </div>\n            </Link>\n            <Link to=\"/jobs\">\n                <div className=\"text-white btn btn-primary\">\n                    View Jobs  \n                </div>\n            </Link>\n            <Link to=\"/addRecord\">\n                <div className=\"text-white btn btn-primary\">\n                    Add Record\n                </div>\n            </Link>\n            <Link to=\"/stats-search\">\n                <div className=\"text-white btn btn-primary\">\n                    Search Stats  \n                </div>\n            </Link>\n            <Link to=\"/myRecords\">\n                <div className=\"text-white btn btn-primary\">\n                    My Records\n                </div>\n            </Link>\n            <button className=\"text-white btn btn-primary\" onClick={logOut}>Log Out</button>\n        </div>\n    )\n\n}\nexport default Header","import React, {useState, useEffect} from \"react\"\nimport './record.css'\n\nfunction AddPay(props){\n    \n    useEffect(() => {\n        fetchItems()\n    },[props]);\n    \n    const [title, setTitle] = useState('');\n    const [hourlyPay, setHourlyPay] = useState('');\n    const [weeklyTips, setWeeklyTips] = useState('');\n    const [weeklyHours, setWeeklyHours] = useState('');\n    const [restaurant, setRestaurant] = useState('');\n    const [allRestaurants, setAllRestaurants] = useState([]);\n    const [errors, setErrors] = useState([]);\n\n    // This function retrieves the information to populate the new pay form//\n    const fetchItems = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/createPay'        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        setTitle(dataReturn.title);\n        let restaurantObjs = [];\n        Array.from(dataReturn.restaurants).forEach(item => {\n            let arrayedItem = [item._id, item.zip_code, item.name, item.entree_price]\n            restaurantObjs.push(arrayedItem);\n        })\n        setAllRestaurants(restaurantObjs);\n        setRestaurant(restaurantObjs[0][0]);\n    }\n\n    // This function sends the information to create a new pay record //\n    const sendData = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + props.token },\n            body: JSON.stringify({ hourly_pay: hourlyPay, weekly_tips: weeklyTips, weekly_hours: weeklyHours, restaurant: restaurant})\n        }\n\n        fetch('https://tipped-server-app.herokuapp.com/api/createPay', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if(data.errors !== undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                setErrors(errorArray)\n            } else {\n                alert('success!');\n                setHourlyPay('');\n                setWeeklyHours('');\n                setWeeklyTips('');\n                setErrors([]);\n            }\n            \n            return data;\n        })\n    }\n\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        sendData();\n\n    }\n\n    const onSelectChange = (event) => {\n        setRestaurant(event.target.value);\n    }\n\n    return (\n        <div class=\"card w-50 h-75 padding-10-px\">\n            <div>\n                <form onSubmit ={e => {onSubmitTask(e)}}>\n                    <h1>{title}</h1>\n                    <label htmlFor='hourly'>Hourly</label>\n                    <input\n                        onChange={e => setHourlyPay(e.target.value)}\n                        type=\"number\"\n                        name=\"hourly\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={hourlyPay}\n                    />\n                    <label htmlFor='weekly tips'>Weekly Tips</label>\n                    <input\n                        onChange={e => setWeeklyTips(e.target.value)}\n                        type=\"number\"\n                        name=\"weekly tips\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={weeklyTips}\n                    />\n                    <label htmlFor='weekly hours'>Weekly Hours</label>\n                    <input\n                        onChange={e => setWeeklyHours(e.target.value)}\n                        type=\"number\"\n                        name=\"weekly hours\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={weeklyHours}\n                    />\n                    <label htmlFor='restaurant'>Restaurant</label>\n                    <select name=\"restaurant\" className=\"form-select\" onChange={onSelectChange}>\n                        {allRestaurants.map((value, index) => {\n                            return <option key={index} value={value[0]}>{value[2]} | {value[1]}</option>\n                        })}\n                    </select>\n                    <input type=\"submit\" className=\"btn btn-primary record-submit\" value=\"Add Pay Record\" />\n                </form>\n            </div>\n            <div>\n                {errors}\n            </div>\n        </div>\n\n        \n    );\n}\n\nexport default AddPay","import React, {useState, useEffect} from \"react\"\n\n\nfunction AddRestaurant(props){\n    \n    useEffect(() => {\n        fetchFormNameAndZips()\n    }, []);\n    \n    const [title, setTitle] = useState('');\n    const [zips, setZips] = useState([]);\n    const [zipCode, setZipCode] = useState('51501');\n    const [name, setName] = useState('');\n    const [entree, setEntree] = useState(1);\n    const [errors, setErrors] = useState(null);\n\n    // This function retrieves the information to populate the new restaurant form//\n    const fetchFormNameAndZips = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/createRestaurant', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        let sortedZipArray = dataReturn.zips.sort(function(a, b) {return (a < b) ? -1 : (a > b) ? 1 : 0;});\n        setZips(sortedZipArray);\n        setTitle(dataReturn.title);\n    }\n\n    // This function sends the information to create a new restaurant //\n    const sendData = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json','Authorization': 'Bearer ' + props.token, },\n            body: JSON.stringify({ zip_code: zipCode, name: name, entree_price: entree})\n        }\n\n        fetch('https://tipped-server-app.herokuapp.com/api/createRestaurant', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if(data.errors != undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                console.log(errorArray)\n                setErrors(errorArray)\n            } else {\n                alert('success!');\n                setZipCode('');\n                setName('');\n                setEntree(1);\n                setErrors([]);\n                props.setNewRestaurant();\n            }\n            \n            return data;\n        })\n    }\n\n    const onSelectChange = (event) => {\n        setZipCode(event.target.value);\n        \n    }\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        sendData();\n        props.setNewRestaurant();\n    }\n\n    return (\n        <div className=\"card w-50 h-75 padding-10-px\">\n            <div>\n                <form onSubmit ={e => {onSubmitTask(e)}}>\n                    <h1 className=\"section-header\">{title}</h1>\n                    <label htmlFor='zip'>Zip Code</label>\n                    <select className=\"form-select\" name='zip' onChange={onSelectChange}>\n                        {zips.map((value, index) => {\n                            return <option key={index} value={value}>{value}</option>\n                        })}\n                    </select>\n                    <label htmlFor='name'>Name</label>\n                    <input\n                        onChange={e => setName(e.target.value)}\n                        type=\"text\"\n                        name=\"name\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        value={name}\n                    />\n                    <label htmlFor='name'>Restaurant Price Rating (1-5)</label>\n                    <input\n                        onChange={e => setEntree(e.target.value)}\n                        type=\"text\"\n                        name=\"entree\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        value={entree}\n                    />\n                    <input type=\"submit\" className=\"btn btn-primary record-submit\" value=\"Add Restaurant\" />\n                </form>\n            </div>\n            <div>\n                {errors}\n            </div>\n        </div>\n\n        \n    );\n}\n\nexport default AddRestaurant","import AddPay from \"./AddPay\";\nimport AddRestaurant from \"./AddRestaurant\";\nimport React, {useState, useEffect} from \"react\"\n\n\nfunction AddRecord (props) {\n    \n    const [newRestaurant, setNewRestaurant] = useState(0);\n\n    const update = () => {\n        setNewRestaurant(newRestaurant +1);\n    }\n\n    return (\n        <div className=\"d-flex flex-row bg-light full-height\">\n            <AddRestaurant setNewRestaurant={update} token={props.token}/>\n            <AddPay  token={props.token}/>\n        </div>\n    )\n}\n\nexport default AddRecord","import React, {useState} from \"react\";\nimport './stats.css'\n\n\nexport default function StatSearchZip (props) {\n\n    const [zipCodeSearched, setZipCodeSearched] = useState('');\n    const [averages, setAverages] = useState();\n\n    // this method fetches the zip code data from the API, and sets the averages state to the return result.\n    const fetchByZip = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getPayByZip/'+zipCodeSearched        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const zipData = await data.json();\n        let average = zipData[\"average\"];\n        console.log(average);\n        if (average == null){\n            average=\"unknown\";\n        }\n        setAverages(average);\n    }\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        fetchByZip();\n    }\n\n    if (averages === 'unknown'){\n        return (\n            <div className='card w-50 h-75 padding-10-px'>\n                <div>\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip</h1>\n                        <label htmlFor='zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <input type=\"submit\" className='btn btn-primary search-button' value=\"Search by Zip\" />\n                    </form>\n                </div>\n                <div className='text-info'>\n                    No records from this zip code.\n                </div>\n            </div>\n    \n            \n        );\n    } else if (averages){\n        return (\n            <div className='card w-50 h-75 padding-10-px'>\n                <div>\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip</h1>\n                        <label htmlFor='zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <input type=\"submit\" className='btn btn-primary search-button' value=\"Search by Zip\" />\n                    </form>\n                </div>\n                <div className='text-info'>\n                    Result found: ${averages} total compensation per hour\n                </div>\n            </div>\n    \n            \n        );\n    }\n    \n    else {\n        return (\n            <div className='card w-50 h-75 padding-10-px'>\n                <div>\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip</h1>\n                        <label htmlFor='zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <input type=\"submit\" className='btn btn-primary search-button' value=\"Search by Zip\"/>\n                    </form>\n                </div>\n            </div>\n            \n        );\n    }\n\n}\n","import React, {useState} from \"react\";\n\n\nfunction StatSearchZipAndPrice (props) {\n\n    const [zipCodeSearched, setZipCodeSearched] = useState('');\n    const [entreeSearched, setEntreeSearched] = useState('');\n    const [averages, setAverages] = useState();\n\n    //This method fetches the average based on both the zip code and entree searched from the API.\n    const fetchByZip = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getPayByZipAndEntree/'+zipCodeSearched+\"/\"+entreeSearched        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const zipData = await data.json();\n        let average = zipData[\"average\"];\n        console.log(average);\n        if (average == null){\n            average=\"unknown\";\n        }\n        setAverages(average);\n    }\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        fetchByZip();\n    }\n    if (averages === 'unknown'){\n        return (\n            <div className='card w-50 h-75 padding-10-px'>\n                <div >\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip and Restaurant Price Rating</h1>\n                        <label htmlFor='Zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <label htmlFor='entree'>Restaurant Price Rating (1-5)</label>\n                        <input\n                            onChange={e => setEntreeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"entree\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            value={entreeSearched}\n                        />\n                        <input type=\"submit\"  className='btn btn-primary search-button' value=\"Search by Zip and Restaurant Price Rating\" />\n                    </form>\n                </div>\n                <div className='text-info'>\n                    No records from this zip code and restaurant price rating combination.\n                </div>\n            </div>\n        )\n    } else if (averages){\n        return (\n            <div className='card w-50 h-75 padding-10-px'>\n                <div >\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip and Restaurant Price Rating</h1>\n                        <label htmlFor='Zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <label htmlFor='entree'>Restaurant Price Rating (1-5)</label>\n                        <input\n                            onChange={e => setEntreeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"entree\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            value={entreeSearched}\n                        />\n                        <input type=\"submit\"  className='btn btn-primary search-button' value=\"Search by Zip and Restaurant Price Rating\" />\n                    </form>\n                </div>\n                <div className='text-info'>\n                    Result found: ${averages} total compensation per hour\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className='card w-50 h-75 padding-10-px'>\n                <div >\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip and Restaurant Price Rating</h1>\n                        <label htmlFor='Zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <label htmlFor='entree'>Restaurant Price Rating (1-5)</label>\n                        <input\n                            onChange={e => setEntreeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"entree\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            value={entreeSearched}\n                        />\n                        <input type=\"submit\"  className='btn btn-primary search-button' value=\"Search by Zip and Restaurant Price Rating\" />\n                    </form>\n                </div>\n            </div>\n        )\n\n    }\n}\nexport default StatSearchZipAndPrice","import StatSearchZip from \"./StatSearchZip\";\nimport StatSearchZipAndPrice from \"./StatSearchZipAndPrice\";\nfunction StatSearch (props) {\n    return(\n        <div className=\"d-flex flex-row bg-light full-height\">\n            <StatSearchZip token={props.token}/>\n            <StatSearchZipAndPrice token={props.token}/>\n        </div>\n    )\n}\n\nexport default StatSearch","import ('./style/Jobs.css')\nexport default function PayRecordCard (props){\n\n    // This checks if the value of the average pay for the card's zip code is unknown or not. \n    // If it is unknown, the card is rendered without the average pay statement.\n\n    if (props.value[4] !== 'unknown') {\n        return (\n            <div className=\"card padding-10-px\" >\n                <div key={props.index}>\n                    <p>Title: {props.value[0]}</p>\n                    <p>Restaurant: {props.value[1]}</p>\n                    <p>Location: {props.value[2]}</p>\n                    <a href={props.value[3]}> Apply/Description </a>\n                    <p>Average pay for the zip code: ${props.value[4]}</p>\n                </div>\n            </div>\n            )\n    } else {\n        return (\n            <div className=\"card padding-10-px\" >\n                <div key={props.index}>\n                    <p>Title: {props.value[0]}</p>\n                    <p>Restaurant: {props.value[1]}</p>\n                    <p>Location: {props.value[2]}</p>\n                    <a href={props.value[3]}> Apply/Description </a>\n                </div>\n            </div>\n            )\n    }\n    \n}","import { useState, useEffect } from \"react\";\nimport JobCard from \"./JobCard\"\nimport ('./style/Jobs.css');\n\nfunction Jobs (props) {\n    \n    const [allJobs, setAllJobs] = useState(['hello paul']);\n\n    useEffect(() => {\n        fetchItems();\n    },[]);\n\n    // This function fetches the list of jobs and averages from the API, and sets allJobs equal to an arrayed version of the results.\n    const fetchItems = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/scraper', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        console.log(dataReturn);\n        let jobsObjs = [];\n        Array.from(dataReturn.jobs).forEach(item => {\n            let arrayedItem = [item.title, item.restaurant, item.location, item.url, item.average]\n            jobsObjs.push(arrayedItem);\n        })\n\n        setAllJobs(jobsObjs);\n    }\n\n    return(\n            <div className=\"d-flex justify-content-center bg-light\">\n                <div className=\"w-50 padding-10-px\">\n                    <h1>Now Hiring - 10 great jobs!</h1>\n                    <p>These jobs are hiring now!</p>\n                </div>\n                <div className=\"w-50\">\n                    {allJobs.map((value, index) => {\n                        return <JobCard index={index} value={value} token={props.token}/>\n                    })}\n                </div>\n            </div>\n\n\n    )\n}\n\nexport default Jobs","import React, {useState, useEffect} from \"react\"\n\nfunction Stats (props) {\n    \n    useEffect(() => {\n        fetchTopFive();\n        fetchPayByEntree();\n    }, []);\n\n    const [top5, setTop5] = useState([]);\n    const [payEntree, setPayEntree] = useState([]);\n    \n    //This method fetches the summary top 5 zip code stats from the API.\n    const fetchTopFive = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getTopFiveZips'\n        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const topZips = await data.json();\n        let zipArray = [];\n        Array.from(topZips).forEach(item => {\n            zipArray.push([item.zip, item.average]);\n        })\n        setTop5(zipArray);\n    }\n\n    //This method fetches the summary averages per entree category from the API.\n    const fetchPayByEntree = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getAllPayByEntree', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const payByEntree = await data.json();\n        let entreeArray = [];\n        Array.from(payByEntree).forEach(item => {\n            entreeArray.push([item.entree_price, item.average]);\n        })\n        setPayEntree(entreeArray);\n    }\n\n    return(\n        <div className=\"d-flex justify-content-center bg-light full-height\">\n            <div className=\"w-50 padding-10-px\">\n                <h1>Welcome to the Omaha Server App</h1>\n    \n            </div>\n            <div className=\"w-50\">\n                <div className=\"card padding-10-px\">\n                    <h3 className=\"card-title\">Top 5 Zip Codes for Total Hourly Compensation</h3>\n                    <div className=\"card-body\">\n                        {top5.map((value, index) => {\n                            return <div key={index}>\n                                {value[0]} | Average Pay: ${value[1]}\n                            </div>\n                        })}\n                    </div>\n                </div>\n                <div className=\"card padding-10-px\">\n                    <h3 className=\"card-title\">Total Hourly Compensation by Restaurant Price Rating</h3>\n                    <div className=\"card-body\">\n                        {payEntree.map((value, index) => {\n                            return <div key={index}>\n                                Price Rating: {value[0]} | Average Pay: ${value[1]}\n                            </div>\n                        })}\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n        \n    )\n\n}\n\nexport default Stats","import React, { useState } from 'react';\nimport './AuthControl.css'\n\n// This is a helper function to log in a user. It is called in the handleSubmit function when a user clicks log in\nasync function loginUser(credentials) {\n  return fetch('https://tipped-server-app.herokuapp.com/api/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  })\n  .then(data => data.json())\n  .catch(err => console.log(err));\n}\n\nexport default function Login(props) {\n  \n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const token = await loginUser({\n      username,\n      password\n    });\n    if (token.error){\n      setMessage(token.error);\n    } \n    props.setToken(token);\n  }\n\n    return(\n      <div className=\"login-signup\">\n        <div className='d-flex justify-content-between'>\n        <h3>Log In</h3>\n        <button className=\"btn btn-outline-link\" onClick={props.toggle}>Back</button>\n      </div>\n      <form onSubmit={handleSubmit}>\n        <div className='form-group'>\n          <label htmlFor='username'>Username</label>\n            <input type=\"text\" name='username' className='form-control' onChange={e => setUserName(e.target.value)} />\n          <label htmlFor='password'>Password</label>\n            <input type=\"password\" className='form-control' onChange={e => setPassword(e.target.value)} />\n        </div>\n        \n        <div className='login-signup-button'>\n          <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n        </div>\n      </form>\n      <div className=\"text-danger\">\n        {message}\n      </div>\n    </div>\n  )\n\n}\n","import React, { useState } from 'react';\n\n// this is an asycn function which signs up a user. It is called in the handleSubmit function which is called when a user clicks sign up.\nasync function signUser(credentials) {\n return fetch('https://tipped-server-app.herokuapp.com/api/createNewUser', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  })\n   .then(data => data.json())\n   .catch(err => console.log(err));\n}\n\nexport default function SignUp(props) {\n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = await signUser({\n      username,\n      password\n    });\n    if (token.error){\n      setMessage(token.error);\n    } \n    props.setToken(token);\n\n  }\n\n\n  return(\n    <div className=\"login-signup\">\n      <div className='d-flex justify-content-between'>\n      <h3>Sign Up</h3>\n      <button className=\"btn btn-outline-link\" onClick={props.toggle}>Back</button>\n    </div>\n    <form onSubmit={handleSubmit}>\n      <div className='form-group'>\n        <label htmlFor='username'>Username</label>\n          <input type=\"text\" name='username' className='form-control' onChange={e => setUserName(e.target.value)} />\n        <label htmlFor='password'>Password</label>\n          <input type=\"password\" className='form-control' onChange={e => setPassword(e.target.value)} />\n      </div>\n      \n      <div className='login-signup-button'>\n        <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n      </div>\n    </form>\n    <div className=\"text-danger\">\n      {message}\n    </div>\n  </div>\n)\n}\n","import { useState } from \"react\";\nimport Login from \"./LoginPage\";\nimport SignUp from \"./signUp\";\nimport './AuthControl.css'\n\nexport default function AuthControl (props){\n    const [signUp, setSignUp] = useState(false);\n    const [login, setLogin] = useState(false);\n\n    const toggleSignUp = () => {\n        if (signUp === true) {\n            setSignUp(false);\n        } else {\n            setSignUp(true);\n        }\n    }\n\n    const toggleLogin = () => {\n        if (login === true) {\n            setLogin(false);\n        } else {\n            setLogin(true);\n        }\n    }\n\n    if (login){\n        return(\n            <Login setToken={props.setToken} toggle={toggleLogin}/>\n        )\n    } else if (signUp){\n        return(\n            <SignUp setToken={props.setToken} toggle={toggleSignUp}/>\n        )\n    } else {\n        return(\n            <div className='main-login-section d-flex flex-column justify-content-around'>\n                <h2 className='title d-flex justify-content-around'>Omaha Server App</h2>\n                <div className='body-login-section d-flex justify-content-around'>\n                    <button className='btn btn-primary btn-lg' onClick={toggleSignUp}>Sign Up</button>\n                    <button className='btn btn-primary btn-lg' onClick={toggleLogin}>Log In</button>\n                </div>\n            </div>\n        )\n    }\n}","import \"./style/PayRecordCard.css\";\n\nexport default function PayRecordCard (props){\n\n    const sendDelete = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + props.token },\n            body: JSON.stringify({ payid: props.value[0]})\n        }\n\n        fetch('https://tipped-server-app.herokuapp.com/api/deletePay', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if(data.errors != undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                alert(errorArray)\n            } else {\n                props.increaseDeleteCount();\n                alert('success!');\n            }            \n            return data;\n        })\n    }\n\n    function increase () {\n        props.increaseUpdateCount(props.value);\n    }\n\n    return (\n    <div className=\"card padding-10-px\" >\n        <div className='card-body' key={props.index}>\n            <p>Pay Record Id: {props.value[0]}</p>\n            <p>Hourly Pay: {props.value[1]}</p>\n            <p>Weekly Tips: {props.value[2]}</p>\n            <p>Weekly Hours: {props.value[3]}</p>\n            <p>Restaurant: {props.value[6]}</p>\n            <div className=\"d-flex justify-content-around\">\n                <button className='btn btn-primary' onClick={sendDelete}>Delete</button>\n                <button className='btn btn-primary'onClick={increase}>Update</button>\n            </div>\n        </div>\n\n        \n    </div>\n    )\n}","import { useState, useEffect } from \"react\";\n\nexport default function UpdateBox (props) {\n\n    useEffect(() => {\n        fetchItems()\n    },[]);\n\n    const [hourlyPay, setHourlyPay] = useState(props.value[1]);\n    const [weeklyTips, setWeeklyTips] = useState(props.value[2]);\n    const [weeklyHours, setWeeklyHours] = useState(props.value[3]);\n    const [restaurant, setRestaurant] = useState(props.value[4]);\n    const [allRestaurants, setAllRestaurants] = useState([]);\n\n\n    const fetchItems = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/createPay'        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        let restaurantObjs = [];\n        Array.from(dataReturn.restaurants).forEach(item => {\n            let arrayedItem = [item._id, item.zip_code, item.name, item.entree_price]\n            restaurantObjs.push(arrayedItem);\n        })\n        setAllRestaurants(restaurantObjs);\n    }\n\n    const sendData = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + props.token },\n            body: JSON.stringify({ hourly_pay: hourlyPay, weekly_tips: weeklyTips, weekly_hours: weeklyHours, restaurant: restaurant, payid: props.value[0]})\n        }\n        console.log(requestOptions)\n        fetch('https://tipped-server-app.herokuapp.com/api/updatePay', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if(data.errors != undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                    alert(errorArray);\n            } else {\n                alert('success!');\n                props.resetUpdateValue();\n            }\n            console.log(data) \n            return data;\n        })\n    }\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        sendData();\n\n    }\n\n    const onSelectChange = (event) => {\n        setRestaurant(event.target.value);\n    }\n\n    return (\n        <div className=\"d-flex flex-row bg-light full-height\">\n            \n            <div className=\"card w-50 h-75\" >\n            <div className='card-body'>\n                <h1>Original</h1>\n                \n                    <p>Pay Record Id: {props.value[0]}</p>\n                    <p>Hourly Pay: {props.value[1]}</p>\n                    <p>Weekly Tips: {props.value[2]}</p>\n                    <p>Weekly Hours: {props.value[3]}</p>\n                    <p>Restaurant: {props.value[6]}</p>\n                </div>\n            </div>\n            <div className=\"card w-50 h-75\">\n            <div className='card-body'>\n                <form onSubmit ={e => {onSubmitTask(e)}}>\n                    <h1 className=\"section-header\">Update</h1>\n                    <label htmlFor='hourly'>Hourly</label>\n                    <input\n                        onChange={e => setHourlyPay(e.target.value)}\n                        type=\"number\"\n                        name=\"hourly\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={hourlyPay}\n                    />\n                    <label htmlFor='weekly tips'>Weekly Tips</label>\n                    <input\n                        onChange={e => setWeeklyTips(e.target.value)}\n                        type=\"number\"\n                        name=\"weekly tips\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={weeklyTips}\n                    />\n                    <label htmlFor='weekly hours'>Weekly Hours</label>\n                    <input\n                        onChange={e => setWeeklyHours(e.target.value)}\n                        type=\"number\"\n                        name=\"weekly hours\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={weeklyHours}\n                    />\n                    <label htmlFor='Restaurant'>Restaurant</label>\n                    <select className='form-select' name='restaurant' onChange={onSelectChange} value={restaurant}>\n                        {allRestaurants.map((value, index) => {\n                            return <option key={index} value={value[0]}>{value[2]} | {value[1]}</option>\n                        })}\n                    </select>\n                    <div className=\"d-flex justify-content-around\">\n                    <input type=\"submit\" className='btn btn-primary record-submit' value=\"Change Pay Record\" />\n                    <button className='btn btn-secondary record-submit'onClick={props.resetUpdateValue}>Cancel</button>\n                    </div>\n                    \n                </form>\n                </div>   \n            </div>\n        </div>\n\n        \n    );\n}","import { useState, useEffect } from \"react\";\nimport PayRecordCard from \"./PayRecordCard\";\nimport UpdateBox from \"./UpdateBox\";\nimport \"./style/MyRecords.css\";\n\nexport default function MyRecord (props) {\n    \n    const [deleteCount, setdeleteCount] = useState(0);\n    const [updateValue, setUpdateValue] = useState([]);\n    const [allRecords, setAllRecords] = useState([[]]);\n    \n\n    useEffect(() => {\n        fetchItems();\n    },[deleteCount, updateValue]);\n\n    //This method is used to trigger a re-rendering upon a delete.\n    const increaseDeleteCount = () => {\n        setdeleteCount(deleteCount+1);\n    }\n\n    const resetUpdateValue = () => {\n        setUpdateValue([]);\n    }\n\n    // This method checks if the value id from the update-button-click is the same as the presently displayed update value.\n    function changeUpdateValue (value) {\n        console.log(updateValue[0]);\n        console.log(value[0]);\n        if (updateValue[0] != value[0]){\n            setUpdateValue(value)\n        } else {\n            setUpdateValue([])\n        }\n    }\n    // This method fetches a list of all restaurants and all pay records for the logged-in user, and sets the value of the user's records to allRecords\n    const fetchItems = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getRestaurants', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        let restaurantObjs = [];\n        Array.from(dataReturn).forEach(item => {\n            let arrayedItem = [item._id, item.zip_code, item.name, item.entree_price]\n            restaurantObjs.push(arrayedItem);\n        })\n\n        const data2 = await fetch ('https://tipped-server-app.herokuapp.com/api/allPayByUser', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn2 = await data2.json();\n        let recordObjs = [];\n        \n        Array.from(dataReturn2).forEach(item => {\n            let restaurantName = '';\n            restaurantObjs.forEach(restaurant => {\n                if (item.restaurant == restaurant[0]){\n                    restaurantName = restaurant[2];\n                }\n            })\n            recordObjs.push([item._id, item.hourly_pay, item.weekly_tips, item.weekly_hours, item.restaurant, item.user, restaurantName]);\n        })\n        setAllRecords(recordObjs);\n    }\n\n    //if there is no update value, the update box is not displayed. if there is an update value, the update box is displayed along with the record cards.\n    if (!updateValue[0]){\n    return(\n        <div className=\"d-flex flex-row bg-light\">\n                <div className=\"w-50 padding-10-px\">\n\n                <h1>Current Records</h1>\n                <p>These are all of your current records in our database, feel free to update or delete any of them</p>\n                </div>\n                <div className='w-50'>\n                    {allRecords.map((value, index) => {\n                        return <PayRecordCard index={index} value={value} token={props.token} increaseDeleteCount={increaseDeleteCount} increaseUpdateCount={changeUpdateValue}/>\n                    })}\n                </div>\n\n        </div>\n\n    )\n    } else {\n        return(\n            <div>\n                <UpdateBox value={updateValue} token={props.token} resetUpdateValue={resetUpdateValue}/>\n            </div>\n    \n        )\n    }\n}","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Header from \"./HeaderComponents/Header\";\nimport AddRecord from \"./AddRecordComponents/AddRecord\";\nimport StatSearch from \"./StatsComponents/StatSearch\";\nimport Jobs from \"./JobComponents/Jobs\";\nimport Home from \"./Home\";\nimport AuthControl from \"./AuthComponents/AuthControl\";\nimport useToken from \"./AuthComponents/useToken\";\nimport MyRecord from \"./MyRecordsComponents/MyRecords\";\nimport './App.css'\n\nfunction App() {\n\n  const { token, setToken } = useToken();\n\n  //If a user is not logged in (i.e. no token), the user cannot view anything besides the login and sign up links\n  if(!token) {\n    return (\n    <div className='row log-in-page'>\n      <div className='col'/>\n      <div className='col log-in-column justify-content-space-around'>\n        <AuthControl setToken={setToken} />       \n      </div>\n      <div className='col' />\n    </div>\n    )\n  }\n\n\n  return (\n    <BrowserRouter basename={'/frontend-tipped-server-app'}>\n      <Header setToken={setToken}/>\n      <Switch>\n        <Route path=\"/\" exact render={(props) => (\n         <Home token={token}/>\n        )} />\n        <Route path=\"/addRecord\" exact render={(props) => (\n         <AddRecord token={token}/>\n        )} />\n        <Route path='/jobs' exact render={(props) => (\n         <Jobs token={token}/>\n        )} />\n        <Route path=\"/stats-search\" exact render={(props) => (\n         <StatSearch token={token}/>\n        )} />\n        <Route path=\"/myRecords\" exact render={(props) => (\n         <MyRecord token={token}/>\n        )} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\n// This component handles the saving a token in sessionStorage, and also assigns the token to the state in App.js\nexport default function useToken() {\n  \n  const getToken = () => {\n    const tokenString = sessionStorage.getItem('token');\n    const userToken = JSON.parse(tokenString);\n    return userToken?.token\n  };\n\n  const [token, setToken] = useState(getToken());\n\n  const saveToken = (userToken) => {\n    sessionStorage.setItem('token', JSON.stringify(userToken));\n    setToken(userToken.token);\n  };\n\n  return {\n    setToken: saveToken,\n    token\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}