{"version":3,"sources":["HeaderComponents/Header.js","AddRecordComponents/AddPay.js","AddRecordComponents/AddRestaurant.js","AddRecordComponents/AddRecord.js","StatsComponents/StatSearchZip.js","StatsComponents/StatSearchZipAndPrice.js","StatsComponents/StatSearch.js","JobComponents/JobCard.js","JobComponents/Jobs.js","Home.js","AuthComponents/LoginPage.js","AuthComponents/signUp.js","AuthComponents/AuthControl.js","MyRecordsComponents/PayRecordCard.js","MyRecordsComponents/UpdateBox.js","MyRecordsComponents/MyRecords.js","App.js","AuthComponents/useToken.js","reportWebVitals.js","index.js"],"names":["Header","props","logOut","sessionStorage","clear","setToken","useState","showOptions","setShowOptions","toggleShowOptions","className","onClick","to","id","AddPay","useEffect","fetchItems","title","setTitle","hourlyPay","setHourlyPay","weeklyTips","setWeeklyTips","weeklyHours","setWeeklyHours","restaurant","setRestaurant","allRestaurants","setAllRestaurants","errors","setErrors","a","fetch","method","headers","token","data","json","dataReturn","restaurantObjs","Array","from","restaurants","forEach","item","objItem","_id","zip","zip_code","name","price","entree_price","push","onSubmitTask","event","preventDefault","requestOptions","body","JSON","stringify","hourly_pay","weekly_tips","weekly_hours","then","response","undefined","array","errorArray","msg","alert","sendData","onSubmit","e","htmlFor","onChange","target","value","type","autoComplete","min","map","index","AddRestaurant","fetchFormNameAndZips","zips","setZips","zipCode","setZipCode","setName","entree","setEntree","sortedZipArray","sort","b","console","log","setNewRestaurant","AddRecord","newRestaurant","StatSearchZip","zipCodeSearched","setZipCodeSearched","averages","setAverages","fetchByZip","zipData","average","Math","round","parseFloat","toFixed","minLength","maxLength","StatSearchZipAndPrice","entreeSearched","setEntreeSearched","StatSearch","PayRecordCard","location","href","url","Jobs","allJobs","setAllJobs","jobsObjs","jobs","averageFloat","Stats","fetchTopFive","fetchPayByEntree","top5","setTop5","payEntree","setPayEntree","topZips","zipArray","payByEntree","entreeArray","loginUser","credentials","catch","err","Login","username","setUserName","password","setPassword","message","setMessage","handleSubmit","error","toggle","signUser","SignUp","AuthControl","signUp","setSignUp","toggleSignUp","hourly","tips","hours","restaurantName","payid","increaseDeleteCount","increaseUpdateCount","UpdateBox","resetUpdateValue","MyRecord","deleteCount","setdeleteCount","updateValue","setUpdateValue","allRecords","setAllRecords","changeUpdateValue","data2","dataReturn2","recordObjs","obj","user","App","tokenString","getItem","userToken","parse","getToken","setItem","useToken","basename","path","exact","render","Home","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a5bfdcf.chunk.js","sourcesContent":["import \"./style/Header.css\";\nimport {Link} from \"react-router-dom\"\nimport React, { useState } from 'react';\n\nfunction Header (props) {\n\n    const logOut = () => {\n        sessionStorage.clear();\n        props.setToken('');\n    }\n    const [showOptions, setShowOptions] = useState(false);\n\n    const toggleShowOptions = () => {\n        setShowOptions(!showOptions);\n    }\n\n    if (!showOptions) {\n        return(\n            <div>\n                <div className=\"d-flex justify-content-around bg-primary align-items-center\" id=\"header-shown\">\n                    <Link to=\"/\">\n                    <div className=\"text-white header-button\">\n                            Home  \n                        </div>\n                    </Link>\n                    <Link to=\"/jobs\">\n                        <div className=\"text-white header-button\">\n                            View Jobs  \n                        </div>\n                    </Link>\n                    <Link to=\"/addRecord\">\n                        <div className=\"text-white header-button\">\n                            Add Record\n                        </div>\n                    </Link>\n                    <Link to=\"/stats-search\">\n                        <div className=\"text-white header-button\">\n                            Search Stats  \n                        </div>\n                    </Link>\n                    <Link to=\"/myRecords\">\n                        <div className=\"text-white header-button\">\n                            My Records\n                        </div>\n                    </Link>\n                    <div className=\"text-white header-button logout\" onClick={logOut}>Log Out</div>\n                </div>\n                <div>\n                <div className=\"dropdown hidden\">\n                    <button className=\"btn btn-primary dropdown-toggle w-100 dropdown-button\" onClick={toggleShowOptions}>\n                        Show Menu\n                    </button>\n                    \n                </div>\n                </div>\n            </div>\n        )\n    } else {\n        return(<div>\n        <div className=\"dropdown\">\n            <button className=\"btn btn-primary dropdown-toggle w-100 dropdown-button\" onClick={toggleShowOptions}>\n                Hide Menu\n            </button>\n            <Link to=\"/\">\n                <div className=\"text-white header-button btn-primary dropdown-button\">\n                        Home  \n                    </div>\n                </Link>\n                <Link to=\"/jobs\">\n                    <div className=\"text-white header-button btn-primary dropdown-button\">\n                        View Jobs  \n                    </div>\n                </Link>\n                <Link to=\"/addRecord\">\n                    <div className=\"text-white header-button btn-primary dropdown-button\">\n                        Add Record\n                    </div>\n                </Link>\n                <Link to=\"/stats-search\">\n                    <div className=\"text-white header-button btn-primary dropdown-button\">\n                        Search Stats  \n                    </div>\n                </Link>\n                <Link to=\"/myRecords\">\n                    <div className=\"text-white header-button btn-primary dropdown-button\">\n                        My Records\n                    </div>\n                </Link>\n                <div className=\"text-white header-button btn-primary dropdown-button\" onClick={logOut}>Log Out</div>\n        </div>\n        </div>)\n    }\n\n\n\n}\nexport default Header","import React, {useState, useEffect} from \"react\"\nimport './record.css'\n\nfunction AddPay(props){\n    \n    useEffect(() => {\n        fetchItems()\n    },[props]);\n    \n    const [title, setTitle] = useState('');\n    const [hourlyPay, setHourlyPay] = useState('');\n    const [weeklyTips, setWeeklyTips] = useState('');\n    const [weeklyHours, setWeeklyHours] = useState('');\n    const [restaurant, setRestaurant] = useState('');\n    const [allRestaurants, setAllRestaurants] = useState([]);\n    const [errors, setErrors] = useState([]);\n\n    // This function retrieves the information to populate the new pay form//\n    const fetchItems = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/createPay'        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        setTitle(dataReturn.title);\n        let restaurantObjs = [];\n        Array.from(dataReturn.restaurants).forEach(item => {\n            let objItem = {id:item._id, zip:item.zip_code, name:item.name, price:item.entree_price};\n            restaurantObjs.push(objItem);\n        })\n        setAllRestaurants(restaurantObjs);\n        setRestaurant(restaurantObjs[0].id);\n    }\n\n    // This function sends the information to create a new pay record //\n    const sendData = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + props.token },\n            body: JSON.stringify({ hourly_pay: hourlyPay, weekly_tips: weeklyTips, weekly_hours: weeklyHours, restaurant: restaurant})\n        }\n\n        fetch('https://tipped-server-app.herokuapp.com/api/createPay', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if(data.errors !== undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                setErrors(errorArray)\n            } else {\n                alert('success!');\n                setHourlyPay('');\n                setWeeklyHours('');\n                setWeeklyTips('');\n                setErrors([]);\n            }\n            \n            return data;\n        })\n    }\n\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        sendData();\n\n    }\n\n    const onSelectChange = (event) => {\n        setRestaurant(event.target.value);\n    }\n\n    return (\n        <div className=\"card custom-column-50 custom-height-75 padding-10-px\">\n            <div>\n                <form onSubmit ={e => {onSubmitTask(e)}}>\n                    <h1 className=\"section-header\">{title}</h1>\n                    <label htmlFor='hourly'>Hourly</label>\n                    <input\n                        onChange={e => setHourlyPay(e.target.value)}\n                        type=\"number\"\n                        name=\"hourly\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={hourlyPay}\n                    />\n                    <label htmlFor='weekly tips'>Weekly Tips</label>\n                    <input\n                        onChange={e => setWeeklyTips(e.target.value)}\n                        type=\"number\"\n                        name=\"weekly tips\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={weeklyTips}\n                    />\n                    <label htmlFor='weekly hours'>Weekly Hours</label>\n                    <input\n                        onChange={e => setWeeklyHours(e.target.value)}\n                        type=\"number\"\n                        name=\"weekly hours\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={weeklyHours}\n                    />\n                    <label htmlFor='restaurant'>Restaurant</label>\n                    <select name=\"restaurant\" className=\"form-select\" onChange={onSelectChange}>\n                        {allRestaurants.map((value, index) => {\n                            return <option key={index} value={value.id}>{value.name} | {value.zip}</option>\n                        })}\n                    </select>\n                    <input type=\"submit\" className=\"btn btn-primary record-submit\" value=\"Add Pay Record\" />\n                </form>\n            </div>\n            <div>\n                {errors}\n            </div>\n        </div>\n\n        \n    );\n}\n\nexport default AddPay","import React, {useState, useEffect} from \"react\"\n\n\nfunction AddRestaurant(props){\n    \n    useEffect(() => {\n        fetchFormNameAndZips()\n    }, []);\n    \n    const [title, setTitle] = useState('');\n    const [zips, setZips] = useState([]);\n    const [zipCode, setZipCode] = useState('51501');\n    const [name, setName] = useState('');\n    const [entree, setEntree] = useState(1);\n    const [errors, setErrors] = useState(null);\n\n    // This function retrieves the information to populate the new restaurant form//\n    const fetchFormNameAndZips = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/createRestaurant', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        let sortedZipArray = dataReturn.zips.sort(function(a, b) {return (a < b) ? -1 : (a > b) ? 1 : 0;});\n        setZips(sortedZipArray);\n        setTitle(dataReturn.title);\n    }\n\n    // This function sends the information to create a new restaurant //\n    const sendData = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json','Authorization': 'Bearer ' + props.token, },\n            body: JSON.stringify({ zip_code: zipCode, name: name, entree_price: entree})\n        }\n\n        fetch('https://tipped-server-app.herokuapp.com/api/createRestaurant', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if(data.errors != undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                console.log(errorArray)\n                setErrors(errorArray)\n            } else {\n                alert('success!');\n                setZipCode('');\n                setName('');\n                setEntree(1);\n                setErrors([]);\n                props.setNewRestaurant();\n            }\n            \n            return data;\n        })\n    }\n\n    const onSelectChange = (event) => {\n        setZipCode(event.target.value);\n        \n    }\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        sendData();\n        props.setNewRestaurant();\n    }\n\n    return (\n        <div className=\"card custom-column-50 custom-height-75 padding-10-px\">\n            <div>\n                <form onSubmit ={e => {onSubmitTask(e)}}>\n                    <h1 className=\"section-header\">{title}</h1>\n                    <label htmlFor='zip'>Zip Code</label>\n                    <select className=\"form-select\" name='zip' onChange={onSelectChange}>\n                        {zips.map((value, index) => {\n                            return <option key={index} value={value}>{value}</option>\n                        })}\n                    </select>\n                    <label htmlFor='name'>Name</label>\n                    <input\n                        onChange={e => setName(e.target.value)}\n                        type=\"text\"\n                        name=\"name\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        value={name}\n                    />\n                    <label htmlFor='name'>Restaurant Price Rating (1-5)</label>\n                    <input\n                        onChange={e => setEntree(e.target.value)}\n                        type=\"text\"\n                        name=\"entree\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        value={entree}\n                    />\n                    <input type=\"submit\" className=\"btn btn-primary record-submit\" value=\"Add Restaurant\" />\n                </form>\n            </div>\n            <div>\n                {errors}\n            </div>\n        </div>\n\n        \n    );\n}\n\nexport default AddRestaurant","import AddPay from \"./AddPay\";\nimport AddRestaurant from \"./AddRestaurant\";\nimport React, {useState, useEffect} from \"react\"\n\n\nfunction AddRecord (props) {\n    \n    const [newRestaurant, setNewRestaurant] = useState(0);\n\n    const update = () => {\n        setNewRestaurant(newRestaurant +1);\n    }\n\n    return (\n        <div className=\"d-flex flex-row bg-light full-height column-mobile\" id=\"column-mobile-add\">\n            <AddRestaurant setNewRestaurant={update} token={props.token}/>\n            <AddPay  token={props.token}/>\n        </div>\n    )\n}\n\nexport default AddRecord","import React, {useState} from \"react\";\nimport './stats.css'\n\n\nexport default function StatSearchZip (props) {\n\n    const [zipCodeSearched, setZipCodeSearched] = useState('');\n    const [averages, setAverages] = useState();\n\n    // this method fetches the zip code data from the API, and sets the averages state to the return result.\n    const fetchByZip = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getPayByZip/'+zipCodeSearched        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const zipData = await data.json();\n        let average = zipData[\"average\"];\n        average = (Math.round(parseFloat(average) * 100) / 100).toFixed(2);\n        if (average == null || average == \"NaN\"){\n            average=\"unknown\";\n        }\n        setAverages(average);\n    }\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        fetchByZip();\n    }\n\n    if (averages === 'unknown'){\n        return (\n            <div className='card custom-column-50 custom-height-75 padding-10-px'>\n                <div>\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip</h1>\n                        <label htmlFor='zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <input type=\"submit\" className='btn btn-primary search-button' value=\"Search\" />\n                    </form>\n                </div>\n                <div className='text-info'>\n                    No records from this zip code.\n                </div>\n            </div>\n    \n            \n        );\n    } else if (averages){\n        return (\n            <div className='card custom-column-50 custom-height-75 padding-10-px'>\n                <div>\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip</h1>\n                        <label htmlFor='zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <input type=\"submit\" className='btn btn-primary search-button' value=\"Search\" />\n                    </form>\n                </div>\n                <div className='text-info'>\n                    Result found: ${averages} total compensation per hour\n                </div>\n            </div>\n    \n            \n        );\n    }\n    \n    else {\n        return (\n            <div className='card custom-column-50 custom-height-75 padding-10-px'>\n                <div>\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip</h1>\n                        <label htmlFor='zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <input type=\"submit\" className='btn btn-primary search-button' value=\"Search\"/>\n                    </form>\n                </div>\n            </div>\n            \n        );\n    }\n\n}\n","import React, {useState} from \"react\";\n\n\nfunction StatSearchZipAndPrice (props) {\n\n    const [zipCodeSearched, setZipCodeSearched] = useState('');\n    const [entreeSearched, setEntreeSearched] = useState('');\n    const [averages, setAverages] = useState();\n\n    //This method fetches the average based on both the zip code and entree searched from the API.\n    const fetchByZip = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getPayByZipAndEntree/'+zipCodeSearched+\"/\"+entreeSearched        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const zipData = await data.json();\n        let average = zipData[\"average\"];\n        average = (Math.round(parseFloat(average) * 100) / 100).toFixed(2);\n        if (average == null || average == \"NaN\"){\n            average=\"unknown\";\n        }\n        if (average == null){\n            average=\"unknown\";\n        }\n        average = (Math.round(parseFloat(average) * 100) / 100).toFixed(2);\n        setAverages(average);\n    }\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        fetchByZip();\n    }\n    if (averages === 'unknown'){\n        return (\n            <div className='card custom-column-50custom-height-75 padding-10-px'>\n                <div >\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip and Restaurant Price Rating</h1>\n                        <label htmlFor='Zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <label htmlFor='entree'>Restaurant Price Rating (1-5)</label>\n                        <input\n                            onChange={e => setEntreeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"entree\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            value={entreeSearched}\n                        />\n                        <input type=\"submit\"  className='btn btn-primary search-button' value=\"Search\" />\n                    </form>\n                </div>\n                <div className='text-info'>\n                    No records from this zip code and restaurant price rating combination.\n                </div>\n            </div>\n        )\n    } else if (averages){\n        return (\n            <div className='card custom-column-50 custom-height-75 padding-10-px'>\n                <div >\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip and Restaurant Price Rating</h1>\n                        <label htmlFor='Zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <label htmlFor='entree'>Restaurant Price Rating (1-5)</label>\n                        <input\n                            onChange={e => setEntreeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"entree\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            value={entreeSearched}\n                        />\n                        <input type=\"submit\"  className='btn btn-primary search-button' value=\"Search\" />\n                    </form>\n                </div>\n                <div className='text-info'>\n                    Result found: ${averages} total compensation per hour\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className='card custom-column-50 custom-height-75 padding-10-px'>\n                <div >\n                    <form onSubmit ={e => {onSubmitTask(e)}}>\n                        <h1 className=\"section-header\">Search By Zip and Restaurant Price Rating</h1>\n                        <label htmlFor='Zip'>Zip</label>\n                        <input\n                            onChange={e => setZipCodeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"zip\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            minLength=\"5\"\n                            maxLength=\"5\"\n                            value={zipCodeSearched}\n                        />\n                        <label htmlFor='entree'>Restaurant Price Rating (1-5)</label>\n                        <input\n                            onChange={e => setEntreeSearched(e.target.value)}\n                            type=\"text\"\n                            name=\"entree\"\n                            className=\"form-control\"\n                            autoComplete=\"off\"\n                            value={entreeSearched}\n                        />\n                        <input type=\"submit\"  className='btn btn-primary search-button' value=\"Search\" />\n                    </form>\n                </div>\n            </div>\n        )\n\n    }\n}\nexport default StatSearchZipAndPrice","import StatSearchZip from \"./StatSearchZip\";\nimport StatSearchZipAndPrice from \"./StatSearchZipAndPrice\";\nfunction StatSearch (props) {\n    return(\n        <div className=\"d-flex flex-row bg-light full-height column-mobile\" id=\"column-mobile\">\n            <StatSearchZip token={props.token}/>\n            <StatSearchZipAndPrice token={props.token}/>\n        </div>\n    )\n}\n\nexport default StatSearch","import ('./style/Jobs.css')\nexport default function PayRecordCard (props){\n\n    // This checks if the value of the average pay for the card's zip code is unknown or not. \n    // If it is unknown, the card is rendered without the average pay statement.\n\n    if (props.value.average !== 'NaN') {\n        return (\n            <div className=\"card padding-10-px\" >\n                <div key={props.index}>\n                    <p>Title: {props.value.title}</p>\n                    <p>Restaurant: {props.value.restaurant}</p>\n                    <p>Location: {props.value.location}</p>\n                    <a href={props.value.url}> Apply/Description </a>\n                    <p>Average pay for the zip code: ${props.value.average}</p>\n                </div>\n            </div>\n            )\n    } else {\n        return (\n            <div className=\"card padding-10-px\" >\n                <div key={props.index}>\n                    <p>Title: {props.value.title}</p>\n                    <p>Restaurant: {props.value.restaurant}</p>\n                    <p>Location: {props.value.location}</p>\n                    <a href={props.value.url}> Apply/Description </a>\n                </div>\n            </div>\n            )\n    }\n    \n}","import { useState, useEffect } from \"react\";\nimport JobCard from \"./JobCard\"\nimport ('./style/Jobs.css');\n\nfunction Jobs (props) {\n    \n    const [allJobs, setAllJobs] = useState(['']);\n\n    useEffect(() => {\n        fetchItems();\n    },[]);\n\n    // This function fetches the list of jobs and averages from the API, and sets allJobs equal to an arrayed version of the results.\n    const fetchItems = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/scraper', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        let jobsObjs = [];\n        Array.from(dataReturn.jobs).forEach(item => {\n            let averageFloat  = (Math.round(parseFloat(item.average) * 100) / 100).toFixed(2);\n            let objItem = {\n                title: item.title,\n                restaurant: item.restaurant,\n                location: item.location,\n                url: item.url,\n                average: averageFloat\n            };\n            jobsObjs.push(objItem);\n        })\n\n        setAllJobs(jobsObjs);\n    }\n\n    return(\n            <div className=\"d-flex justify-content-center bg-light column-mobile\" id=\"column-mobile-jobs\">\n                <div className=\"padding-10-px custom-column-50\">\n                    <h1>Now Hiring - 10 great jobs!</h1>\n                    <p>These jobs are hiring now!</p>\n                </div>\n                <div className=\"custom-column-50\">\n                    {allJobs.map((value, index) => {\n                        return <JobCard index={index} key={index*7} value={value} token={props.token}/>\n                    })}\n                </div>\n            </div>\n\n\n    )\n}\n\nexport default Jobs","import React, {useState, useEffect} from \"react\"\n\nfunction Stats (props) {\n    \n    useEffect(() => {\n        fetchTopFive();\n        fetchPayByEntree();\n    }, []);\n\n    const [top5, setTop5] = useState([]);\n    const [payEntree, setPayEntree] = useState([]);\n    \n    //This method fetches the summary top 5 zip code stats from the API.\n    const fetchTopFive = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getTopFiveZips'\n        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const topZips = await data.json();\n        let zipArray = [];\n        Array.from(topZips).forEach(item => {\n            zipArray.push([item.zip, item.average]);\n        })\n        setTop5(zipArray);\n    }\n\n    //This method fetches the summary averages per entree category from the API.\n    const fetchPayByEntree = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getAllPayByEntree', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const payByEntree = await data.json();\n        let entreeArray = [];\n        Array.from(payByEntree).forEach(item => {\n            entreeArray.push([item.entree_price, item.average]);\n        })\n        setPayEntree(entreeArray);\n    }\n\n    return(\n        <div className=\"d-flex bg-light full-height column-mobile\">\n            <div className=\"custom-column-50 padding-10-px\">\n                <h1>Welcome to Omaha Tips</h1>\n            </div>\n            <div className=\"custom-column-50\">\n                <div className=\"card padding-10-px\">\n                    <h3 className=\"card-title\">Top 5 Zip Codes for Total Hourly Compensation</h3>\n                    <div className=\"card-body\">\n                        {top5.map((value, index) => {\n                            return <div key={index}>\n                                {value[0]} | Average Pay: ${value[1]}\n                            </div>\n                        })}\n                    </div>\n                </div>\n                <div className=\"card padding-10-px\">\n                    <h3 className=\"card-title\">Total Hourly Compensation by Restaurant Price Rating</h3>\n                    <div className=\"card-body\">\n                        {payEntree.map((value, index) => {\n                            return <div key={index}>\n                                Price Rating: {value[0]} | Average Pay: ${value[1]}\n                            </div>\n                        })}\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n        \n    )\n\n}\n\nexport default Stats","import React, { useState } from 'react';\nimport './AuthControl.css'\n\n// This is a helper function to log in a user. It is called in the handleSubmit function when a user clicks log in\nasync function loginUser(credentials) {\n  return fetch('https://tipped-server-app.herokuapp.com/api/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  })\n  .then(data => data.json())\n  .catch(err => console.log(err));\n}\n\nexport default function Login(props) {\n  \n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const token = await loginUser({\n      username,\n      password\n    });\n    if (token.error){\n      setMessage(token.error);\n    } \n    props.setToken(token);\n  }\n\n    return(\n      <div className=\"login-signup\">\n          <form onSubmit={handleSubmit}>\n            <div className='form-group'>\n              <label htmlFor='username'>Username</label>\n                <input type=\"text\" name='username' className='form-control' onChange={e => setUserName(e.target.value)} />\n              <label htmlFor='password'>Password</label>\n                <input type=\"password\" className='form-control' onChange={e => setPassword(e.target.value)} />\n            </div>\n            <div className='login-signup-button'>\n              <button className=\"btn btn-primary\" type=\"submit\">Log In</button>\n              <div className=\"switch-to-sign-up\">\n                <span className=\"no-account\">No Account? </span>\n                <a className=\"sign-up-link no-account\" onClick={props.toggle}>Sign Up</a>\n              </div>\n              <div className=\"switch-to-sign-up-mobile\">\n                <a className=\"sign-up-link no-account\" onClick={props.toggle}>No Account?</a>\n              </div>\n            </div>\n          </form> \n          <div className=\"text-danger\">\n            {message}\n          </div>\n    </div>\n  )\n\n}\n","import React, { useState } from 'react';\n\n// this is an async function which signs up a user. It is called in the handleSubmit function which is called when a user clicks sign up.\nasync function signUser(credentials) {\n return fetch('https://tipped-server-app.herokuapp.com/api/createNewUser', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  })\n   .then(data => data.json())\n   .catch(err => console.log(err));\n}\n\nexport default function SignUp(props) {\n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = await signUser({\n      username,\n      password\n    });\n    if (token.error){\n      setMessage(token.error);\n    } \n    props.setToken(token);\n\n  }\n\n\n  return(\n    <div className=\"login-signup\">\n      <div className='d-flex justify-content-between'>\n      <h3>Sign Up</h3>\n      <button className=\"btn btn-outline-link\" onClick={props.toggle}>Back</button>\n    </div>\n    <form onSubmit={handleSubmit}>\n      <div className='form-group'>\n        <label htmlFor='username'>Username</label>\n          <input type=\"text\" name='username' className='form-control' onChange={e => setUserName(e.target.value)} />\n        <label htmlFor='password'>Password</label>\n          <input type=\"password\" className='form-control' onChange={e => setPassword(e.target.value)} />\n      </div>\n      \n      <div className='login-signup-button'>\n        <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n      </div>\n    </form>\n    <div className=\"text-danger\">\n      {message}\n    </div>\n  </div>\n)\n}\n","import { useState } from \"react\";\nimport Login from \"./LoginPage\";\nimport SignUp from \"./signUp\";\nimport './AuthControl.css'\n\nexport default function AuthControl (props){\n    const [signUp, setSignUp] = useState(false);\n\n    const toggleSignUp = () => {\n        if (signUp === true) {\n            setSignUp(false);\n        } else {\n            setSignUp(true);\n        }\n    }\n\n    if (signUp){\n        return(\n            <div className='main-login-section d-flex flex-column justify-content-center' id=\"login-box-2\">\n                <SignUp setToken={props.setToken} toggle={toggleSignUp}/>\n            </div>\n        )\n    } else {\n        return(\n            <div className='main-login-section d-flex flex-column justify-content-center' id=\"login-box\">\n                <div className=\"border-bottom\">\n                    <h2 className='title d-flex justify-content-around'>Omaha Tips</h2>\n                    <h6 className=\"subheading\">For servers in the Omaha, NE metro area to view unofficial pay stats for area restaurants.</h6>\n                </div>\n                <Login setToken={props.setToken} toggle={toggleSignUp}/>\n            </div>\n        )\n    }\n}","import \"./style/PayRecordCard.css\";\n\nexport default function PayRecordCard (props){\n\n    const sendDelete = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + props.token },\n            body: JSON.stringify({ payid: props.value.id})\n        }\n\n        fetch('https://tipped-server-app.herokuapp.com/api/deletePay', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if(data.errors != undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                alert(errorArray)\n            } else {\n                props.increaseDeleteCount();\n                alert('success!');\n            }            \n            return data;\n        })\n    }\n\n    function increase () {\n        props.increaseUpdateCount(props.value);\n    }\n\n    return (\n    <div className=\"card padding-10-px\" >\n        <div className='card-body' key={props.index}>\n            <p>Pay Record Id: {props.value.id}</p>\n            <p>Hourly Pay: {props.value.hourly}</p>\n            <p>Weekly Tips: {props.value.tips}</p>\n            <p>Weekly Hours: {props.value.hours}</p>\n            <p>Restaurant: {props.value.restaurantName}</p>\n            <div className=\"d-flex justify-content-around\">\n                <button className='btn btn-primary' onClick={sendDelete}>Delete</button>\n                <button className='btn btn-primary'onClick={increase}>Update</button>\n            </div>\n        </div>\n\n        \n    </div>\n    )\n}","import { useState, useEffect } from \"react\";\n\nexport default function UpdateBox (props) {\n\n    useEffect(() => {\n        fetchItems()\n    },[]);\n\n    const [hourlyPay, setHourlyPay] = useState(props.value.hourly);\n    const [weeklyTips, setWeeklyTips] = useState(props.value.tips);\n    const [weeklyHours, setWeeklyHours] = useState(props.value.hours);\n    const [restaurant, setRestaurant] = useState(props.value.restaurant);\n    const [allRestaurants, setAllRestaurants] = useState([]);\n\n\n    const fetchItems = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/createPay'        , {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        let restaurantObjs = [];\n        Array.from(dataReturn.restaurants).forEach(item => {\n            let objItem = {\n                id: item._id,\n                zip: item.zip,\n                name: item.name,\n                price: item.entree_price\n            };\n            restaurantObjs.push(objItem);\n        })\n        setAllRestaurants(restaurantObjs);\n    }\n\n    const sendData = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + props.token },\n            body: JSON.stringify({ hourly_pay: hourlyPay, weekly_tips: weeklyTips, weekly_hours: weeklyHours, restaurant: restaurant, payid: props.value.id})\n        }\n        console.log(requestOptions)\n        fetch('https://tipped-server-app.herokuapp.com/api/updatePay', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n            if(data.errors != undefined){\n                let array = Array.from(data.errors);\n                let errorArray = [];\n                array.forEach(item => {\n                    errorArray.push(item.msg + \"; \")\n                })\n                    alert(errorArray);\n            } else {\n                alert('success!');\n                props.resetUpdateValue();\n            }\n            console.log(data) \n            return data;\n        })\n    }\n\n    const onSubmitTask = (event) => {\n        event.preventDefault();\n        sendData();\n\n    }\n\n    const onSelectChange = (event) => {\n        setRestaurant(event.target.value);\n    }\n\n    return (\n        <div className=\"d-flex flex-row bg-light full-height \" id=\"column-mobile-myrecords-update\">\n            <div className=\"card custom-column-50 custom-height-75\">\n            <div className='card-body'>\n                <form onSubmit ={e => {onSubmitTask(e)}}>\n                    <h1 className=\"section-header\">Update</h1>\n                    <label htmlFor='hourly'>Hourly</label>\n                    <input\n                        onChange={e => setHourlyPay(e.target.value)}\n                        type=\"number\"\n                        name=\"hourly\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={hourlyPay}\n                    />\n                    <label htmlFor='weekly tips'>Weekly Tips</label>\n                    <input\n                        onChange={e => setWeeklyTips(e.target.value)}\n                        type=\"number\"\n                        name=\"weekly tips\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={weeklyTips}\n                    />\n                    <label htmlFor='weekly hours'>Weekly Hours</label>\n                    <input\n                        onChange={e => setWeeklyHours(e.target.value)}\n                        type=\"number\"\n                        name=\"weekly hours\"\n                        className=\"form-control\"\n                        autoComplete=\"off\"\n                        min=\"1\"\n                        value={weeklyHours}\n                    />\n                    <label htmlFor='Restaurant'>Restaurant</label>\n                    <select className='form-select' name='restaurant' onChange={onSelectChange} value={restaurant}>\n                        {allRestaurants.map((value, index) => {\n                            return <option key={index} value={value.id}>{value.name} | {value.zip}</option>\n                        })}\n                    </select>\n                    <div className=\"d-flex justify-content-around\">\n                    <input type=\"submit\" className='btn btn-primary record-submit' value=\"Change Pay Record\" />\n                    <button className='btn btn-secondary record-submit'onClick={props.resetUpdateValue}>Cancel</button>\n                    </div>\n                    \n                </form>\n                </div>   \n            </div>\n            <div className=\"card custom-column-50 custom-height-75\" >\n            <div className='card-body'>\n                <h1>Original</h1>\n                \n                    <p>Pay Record Id: {props.value.id}</p>\n                    <p>Hourly Pay: {props.value.hourly}</p>\n                    <p>Weekly Tips: {props.value.tips}</p>\n                    <p>Weekly Hours: {props.value.hours}</p>\n                    <p>Restaurant: {props.value.restaurantName}</p>\n                </div>\n            </div>\n        </div>\n\n        \n    );\n}","import { useState, useEffect } from \"react\";\nimport PayRecordCard from \"./PayRecordCard\";\nimport UpdateBox from \"./UpdateBox\";\nimport \"./style/MyRecords.css\";\n\nexport default function MyRecord (props) {\n    \n    const [deleteCount, setdeleteCount] = useState(0);\n    const [updateValue, setUpdateValue] = useState({});\n    const [allRecords, setAllRecords] = useState([{}]);\n    \n\n    useEffect(() => {\n        fetchItems();\n    },[deleteCount, updateValue]);\n\n    //This method is used to trigger a re-rendering upon a delete.\n    const increaseDeleteCount = () => {\n        setdeleteCount(deleteCount+1);\n    }\n\n    const resetUpdateValue = () => {\n        setUpdateValue({});\n    }\n\n    // This method checks if the value id from the update-button-click is the same as the presently displayed update value.\n    function changeUpdateValue (value) {\n        console.log(updateValue.id);\n        console.log(value.id);\n        if (!updateValue.id || (updateValue.id != value.id)){\n            setUpdateValue(value)\n        } else {\n            setUpdateValue({})\n        }\n    }\n    // This method fetches a list of all restaurants and all pay records for the logged-in user, and sets the value of the user's records to allRecords\n    const fetchItems = async () => {\n        const data = await fetch ('https://tipped-server-app.herokuapp.com/api/getRestaurants', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn = await data.json();\n        let restaurantObjs = [];\n        Array.from(dataReturn).forEach(item => {\n            let objItem = {\n                id: item._id,\n                zip: item.zip_code,\n                name: item.name,\n                price: item.entree_price\n            }\n            restaurantObjs.push(objItem);\n        })\n\n        const data2 = await fetch ('https://tipped-server-app.herokuapp.com/api/allPayByUser', {\n            method: 'GET',\n            headers:{\n                'Authorization': 'Bearer ' + props.token,\n            },\n        }\n        );\n        const dataReturn2 = await data2.json();\n        let recordObjs = [];\n        \n        Array.from(dataReturn2).forEach(item => {\n            let restaurantName = '';\n            restaurantObjs.forEach(restaurant => {\n                if (item.restaurant == restaurant.id){\n                    restaurantName = restaurant.name;\n                }\n            });\n            let obj = {\n                id: item._id,\n                hourly: item.hourly_pay,\n                tips: item.weekly_tips,\n                hours: item.weekly_hours,\n                restaurant: item.restaurant,\n                user: item.user,\n                restaurantName: restaurantName\n            }\n            recordObjs.push(obj);\n        })\n        setAllRecords(recordObjs);\n    }\n\n    //if there is no update value, the update box is not displayed. if there is an update value, the update box is displayed along with the record cards.\n    if (!updateValue.id){\n    return(\n        <div className=\"d-flex flex-row bg-light column-mobile\" id=\"column-mobile-myrecords\">\n                <div className=\"custom-column-50 padding-10-px\">\n\n                <h1>Current Records</h1>\n                <p>These are all of your current records in our database, feel free to update or delete any of them</p>\n                </div>\n                <div className='custom-column-50'>\n                    {allRecords.map((value, index) => {\n                        return <PayRecordCard index={index} value={value} token={props.token} increaseDeleteCount={increaseDeleteCount} increaseUpdateCount={changeUpdateValue}/>\n                    })}\n                </div>\n\n        </div>\n\n    )\n    } else {\n        return(\n            <div>\n                <UpdateBox value={updateValue} token={props.token} resetUpdateValue={resetUpdateValue}/>\n            </div>\n    \n        )\n    }\n}","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Header from \"./HeaderComponents/Header\";\nimport AddRecord from \"./AddRecordComponents/AddRecord\";\nimport StatSearch from \"./StatsComponents/StatSearch\";\nimport Jobs from \"./JobComponents/Jobs\";\nimport Home from \"./Home\";\nimport AuthControl from \"./AuthComponents/AuthControl\";\nimport useToken from \"./AuthComponents/useToken\";\nimport MyRecord from \"./MyRecordsComponents/MyRecords\";\nimport './App.css'\n\nfunction App() {\n\n  const { token, setToken } = useToken();\n\n  //If a user is not logged in (i.e. no token), the user cannot view anything besides the login and sign up links\n  if(!token) {\n    return (\n    <div className='row log-in-page'>\n      <div className='col'/>\n      <div className='col log-in-column justify-content-space-around'>\n        <AuthControl setToken={setToken} />       \n      </div>\n      <div className='col' />\n    </div>\n    )\n  }\n\n\n  return (\n    <BrowserRouter basename={'/frontend-tipped-server-app'}>\n      <Header setToken={setToken}/>\n      <Switch>\n        <Route path=\"/\" exact render={(props) => (\n         <Home token={token}/>\n        )} />\n        <Route path=\"/addRecord\" exact render={(props) => (\n         <AddRecord token={token}/>\n        )} />\n        <Route path='/jobs' exact render={(props) => (\n         <Jobs token={token}/>\n        )} />\n        <Route path=\"/stats-search\" exact render={(props) => (\n         <StatSearch token={token}/>\n        )} />\n        <Route path=\"/myRecords\" exact render={(props) => (\n         <MyRecord token={token}/>\n        )} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\n// This component handles the saving a token in sessionStorage, and also assigns the token to the state in App.js\nexport default function useToken() {\n  \n  const getToken = () => {\n    const tokenString = sessionStorage.getItem('token');\n    const userToken = JSON.parse(tokenString);\n    return userToken?.token\n  };\n\n  const [token, setToken] = useState(getToken());\n\n  const saveToken = (userToken) => {\n    sessionStorage.setItem('token', JSON.stringify(userToken));\n    setToken(userToken.token);\n  };\n\n  return {\n    setToken: saveToken,\n    token\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}